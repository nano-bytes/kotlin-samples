group 'org.decorator'

allprojects {
    version = '1.0'
    apply plugin: 'java'
    apply plugin: 'application'
    apply plugin: 'kotlin'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }

// Version of dependencies
    ext {
        kotlin_version = '1.4.21'
        junit_version = '5.6.0'
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: "$kotlin_version"
        compile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: "$kotlin_version"

        testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "$junit_version"
        testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "$junit_version"
    }
}

buildscript {
    ext{
        kotlin_version = '1.4.21'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
    }
}

mainClassName = "org.decorator.Main"

jar {
    baseName = "decorator"
    archiveName = "$baseName.$extension"

    manifest {
        attributes(
                'Implementation-Title': "$baseName.$extension",
                'Implementation-Version': version,
                'Build-Time' : new java.text.SimpleDateFormat().format(new Date()))
        if (!configurations.compile.isEmpty()) {
            attributes(
                    'Main-Class': "$mainClassName"
            )
        }
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

task buildDecorator(dependsOn: ['build'])